import streamlit as st
import pandas as pd
from regex_classifier import classify_with_regex
from bert_classifier import classify_with_bert
from llm_classifier import classify_with_llm
from io import StringIO

# Title and sidebar navigation
st.set_page_config(page_title="Log Classifier Dashboard", layout="wide")
st.sidebar.title("🧭 Navigation")
page = st.sidebar.radio("Choose a section", ["🔍 Classify Logs", "📄 About App"])

# Core functions
def classify(logs):
    labels = []
    for source, log_msg in logs:
        label = classify_log(source, log_msg)
        labels.append(label)
    return labels

def classify_log(source, log_msg):
    if source == "LegacyCRM":
        label = classify_with_llm(log_msg)
    else:
        label = classify_with_regex(log_msg)
        if not label:
            label = classify_with_bert(log_msg)
    return label

def process_csv(uploaded_file):
    df = pd.read_csv(uploaded_file)
    df["target_label"] = classify(list(zip(df["source"], df["log_message"])))
    return df

# ─────────────────────────────
# 📄 About Page
# ─────────────────────────────
if page == "📄 About App":
    st.markdown("## 📄 About This App")
    st.write("""
    The **Log Classifier Dashboard** helps businesses automatically categorize and analyze logs generated by various systems like CRMs, billing platforms, or HR tools.

    ### 🔧 Features:
    - Accepts logs via CSV upload or manual entry
    - Uses a hybrid classification approach:
        - ✅ Rule-based regex detection
        - 🤖 BERT-based classification
        - 🧠 LLM-powered fallback for complex cases
    - Outputs downloadable CSV files with predicted labels
    - Designed to assist support teams, analysts, and developers with real-time log triage

    ### 👨‍💻 Technologies Used:
    - **Python**
    - **Streamlit**
    - **Pandas**
    - **Scikit-learn**
    - **Transformers (BERT)**
    - **LLMs (for fallback logic)**

    ### 🏢 Ideal For:
    - Enterprises with complex software logs
    - Security operations centers (SOCs)
    - DevOps / SRE teams
    - Customer support analysis
    """)
    st.success("Built with ❤️ for smart automation and log intelligence.")

# ─────────────────────────────
# 🔍 Classify Logs Page
# ─────────────────────────────
elif page == "🔍 Classify Logs":
    st.markdown("## 🔍 Log Classification")
    uploaded_file = st.file_uploader("Upload CSV File with `source` and `log_message` columns", type=["csv"])

    if uploaded_file:
        df = process_csv(uploaded_file)
        st.success("✅ Logs classified successfully.")
        st.write("📋 Preview of Classified Logs", df.head())

        csv = df.to_csv(index=False).encode("utf-8")
        st.download_button("📥 Download Results as CSV", csv, "classified_logs.csv", "text/csv", key="csv_download_uploaded")

    st.markdown("---")
    st.markdown("### ✍️ Or Manually Classify a Single Log")
    source = st.selectbox("Select Source", ["ModernCRM", "BillingSystem", "AnalyticsEngine", "ModernHR", "LegacyCRM"])
    log_input = st.text_area("Enter a log message")

    if st.button("Classify Log"):
        label = classify_log(source, log_input)
        st.success(f"**Predicted Label:** `{label}`")

        # Option to download the single result
        single_result = pd.DataFrame([[source, log_input, label]], columns=["source", "log_message", "target_label"])
        csv = single_result.to_csv(index=False).encode("utf-8")
        st.download_button("📥 Download Result as CSV", csv, "single_classified_log.csv", "text/csv", key="csv_download_manual")
